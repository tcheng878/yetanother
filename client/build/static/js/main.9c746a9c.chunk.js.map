{"version":3,"sources":["components/ProductForm.js","components/DeleteButton.js","components/ProductList.js","views/Main.js","views/Details.js","App.js","serviceWorker.js","index.js"],"names":["props","initialproject","initialdate","onSubmitProp","useState","project","setProject","date","setDate","onSubmit","e","preventDefault","state","type","name","value","onChange","target","productId","successCallback","style","background","onClick","axios","delete","then","res","product","removeFromDom","map","prod","idx","overdue","Date","now","put","_id","console","log","startproject","movetocompleted","DeleteButton","setProduct","loaded","setLoaded","useEffect","Axios","get","data","onclick","ProductList","filter","to","errors","setErrors","err","index","key","ProductForm","producttemp","flag","i","length","errorArr","push","post","navigate","catch","errorResponse","response","Object","keys","message","App","className","Main","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.9c746a9c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default props => {\r\n    //keep track of what is being typed via useState hook\r\n\r\n    const {initialproject, initialdate, onSubmitProp} = props;\r\n    const [project, setProject] = useState(initialproject); \r\n    const [date, setDate] = useState(initialdate);\r\n    const state = 0;\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        onSubmitProp({project, date, state});\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmitHandler}>\r\n            <p>\r\n                <label>project</label><br/>\r\n                <input type=\"text\" name=\"project\" value={project} onChange = {(e)=>setProject(e.target.value)}/>\r\n            </p>\r\n            <p>\r\n                <label>date</label><br/>\r\n                <input type=\"date\" name=\"date\" value={date} onChange = {(e)=>setDate(e.target.value)}/>\r\n            </p>\r\n            <input type=\"submit\" value=\"Plan Project\"/>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default props => {\r\n    const { productId, successCallback } = props;\r\n    const deleteProduct = e => {\r\n        axios.delete('http://localhost:8000/api/product/' + productId)\r\n            .then(res=>{\r\n                successCallback();\r\n            })\r\n    }\r\n    return (\r\n        <button style = {{background: \"red\"}} onClick={deleteProduct}>\r\n            Remove Project\r\n        </button>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from '@reach/router';\r\nimport axios from 'axios';\r\nimport DeleteButton from './DeleteButton';\r\n\r\nexport default props => {\r\n    const {product, removeFromDom} = props;\r\n\r\n    const startproject = (e) => {\r\n        e.state = 1;\r\n        axios.put('http://localhost:8000/api/product/' + e._id, e)\r\n            .then(res => console.log(res))\r\n    }\r\n\r\n    const movetocompleted = (e) => {\r\n        e.state = 2;\r\n        axios.put('http://localhost:8000/api/product/' + e._id, e)\r\n            .then(res => console.log(res))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tr>\r\n                    <th style = {{background: \"blue\"}}>Backlog</th>\r\n                    <th style = {{background: \"yellow\"}}>In Progress</th>\r\n                    <th style = {{background: \"green\"}}>Completed</th>\r\n                </tr>\r\n            {product.map((prod, idx) => {\r\n                var curdate = new Date(prod.date)\r\n                var delta_time = curdate - Date.now();\r\n                var overdue = false;\r\n                if(delta_time < 0){\r\n                    overdue = true;\r\n                }\r\n                return (\r\n                    <>\r\n                    {prod.state == 0 &&\r\n                        <tr>\r\n                            <td>\r\n                                <p>{prod.project} state is {prod.state}</p>\r\n                                {overdue == 0 &&\r\n                                    <p>Due: {prod.date}</p>\r\n                                }\r\n                                {overdue == 1 &&\r\n                                    <p style = {{background: \"red\"}}>Due: {prod.date}</p>\r\n                                }\r\n                                <p><button style = {{background: \"yellow\"}} onClick = {e => startproject(prod)} >Start Project</button></p>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                    {prod.state == 1 &&\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>\r\n                                <p>{prod.project} state is {prod.state}</p>\r\n                                {overdue == 0 &&\r\n                                    <p>Due: {prod.date}</p>\r\n                                }\r\n                                {overdue == 1 &&\r\n                                    <p style = {{background: \"red\"}}>Due: {prod.date}</p>\r\n                                }\r\n                                <p><button style = {{background: \"green\"}} onClick = {e => movetocompleted(prod)} >Move to Completed</button></p>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                    {prod.state == 2 &&\r\n                        <tr>\r\n                            <td/>\r\n                            <td/>\r\n                            <td>\r\n                                <p>{prod.project} state is {prod.state}</p>\r\n                                {overdue == 0 &&\r\n                                    <p>Due: {prod.date}</p>\r\n                                }\r\n                                {overdue == 1 &&\r\n                                    <p style = {{background: \"red\"}}>Due: {prod.date}</p>\r\n                                }\r\n                                <p><DeleteButton  productId={prod._id} successCallback={()=>removeFromDom(prod._id)}/></p>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                    </>\r\n                    // <p key={idx}>\r\n                    //     <Link to={\"/product/\" + prod._id}>\r\n                    //         {prod.project}, {prod.date}\r\n                    //     </Link>\r\n                    //     |\r\n                    //     <Link to={\"/product/update/\" + prod._id}>\r\n                    //         Edit\r\n                    //     </Link> \r\n                    //     |\r\n                    //    <DeleteButton productId={prod._id} successCallback={()=>removeFromDom(prod._id)}/>\r\n                    // </p>\r\n                )\r\n            })}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport ProductForm from '../components/ProductForm';\r\nimport ProductList from '../components/ProductList';\r\nimport Axios from 'axios';\r\nimport { navigate, Link } from '@reach/router';\r\n\r\nexport default () => {\r\n    const [product, setProduct] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get('http://localhost:8000/api/products')\r\n            .then(res=>{\r\n                setProduct(res.data);\r\n                setLoaded(true);\r\n            });\r\n    }, onclick)\r\n\r\n    const removeFromDom = productId => {\r\n        setProduct(product.filter(product => product._id != productId));\r\n    }\r\n\r\n    const createProduct = producttemp => {\r\n        Axios.post('http://localhost:8000/api/product', producttemp)\r\n            .then(res=> {\r\n                setProduct([...product, res.data]);\r\n            })\r\n            .catch(err => {\r\n                const errorResponse = err.response.data.errors;\r\n                const errorArr = [];\r\n                for (const key of Object.keys(errorResponse)) {\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                setErrors(errorArr);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Project Manager</h1>\r\n           {loaded && <ProductList product = {product} removeFromDom={removeFromDom}/>}\r\n           <p><Link to=\"/projects/new\">Add New Project</Link></p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport ProductForm from '../components/ProductForm';\r\nimport ProductList from '../components/ProductList';\r\nimport Axios from 'axios';\r\nimport { navigate, Link } from '@reach/router';\r\n\r\nexport default () => {\r\n    const [product, setProduct] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get('http://localhost:8000/api/products')\r\n            .then(res=>{\r\n                setProduct(res.data);\r\n                setLoaded(true);\r\n            });\r\n    }, [])\r\n\r\n    const removeFromDom = productId => {\r\n        setProduct(product.filter(product => product._id != productId));\r\n    }\r\n\r\n    const createProduct = producttemp => {\r\n        var flag = false;\r\n        for(var i = 0; i < product.length; i++){\r\n            if(product[i].project == producttemp.project){\r\n                flag = true;\r\n                const errorArr = [];\r\n                errorArr.push(\"This project already exists!\")\r\n                setErrors(errorArr);\r\n                break;\r\n            }\r\n        }\r\n        if(flag == false){\r\n            Axios.post('http://localhost:8000/api/product', producttemp)\r\n                .then(res=> {\r\n                    setProduct([...product, res.data]);\r\n                    navigate(\"/\");\r\n                })\r\n                .catch(err => {\r\n                    const errorResponse = err.response.data.errors;\r\n                    const errorArr = [];\r\n                    for (const key of Object.keys(errorResponse)) {\r\n                        errorArr.push(errorResponse[key].message)\r\n                    }\r\n                    setErrors(errorArr);\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Project Manager</h1>\r\n            <hr></hr>\r\n            <p><Link to=\"/\">Back to Dashboard</Link></p>\r\n            <h3>Plan a new Project</h3>\r\n            {errors.map((err,index) => {\r\n                return(\r\n                    <p key={index}>{err}</p>\r\n                )\r\n            })}\r\n           <ProductForm onSubmitProp = {createProduct} initialproject=\"\" initialdate=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport Main from './views/Main';\nimport Detail from './views/Details';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path=\"/\"/>\n        <Detail path=\"projects/new\" />\n      </Router>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}